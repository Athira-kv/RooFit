#define l_roofit_mom_cxx
#include "l_roofit_mom.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <fstream> // Include fstream for file I/O

double m_pi = 0.139570;

void l_roofit_mom::Loop()
{

  if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   TH2D* h_arment = new TH2D("arment","arment", 2000, -1, 1, 400, 0, 0.4);
   TH1D* h_invmass_l = new TH1D("lmass","lmass",100,1.05,1.5);

   TH2I *h2 = new TH2I("h2", "Negative vs Positive Particle Identification;Negative Particle;Positive Particle", 4, -0.5, 3.5, 4, -0.5, 3.5);
   
   //momentum bins: Momentum p(GeV/c) = (10,11,12,13,15,17,19,22,25,27,30,35,40,50)

   std::vector<float> mombins = {10.0 ,11.0 ,12.0 ,13.0 ,15.0 ,17.0 ,19.0 ,22.0 ,25.0 ,27.0 ,30.0 ,35.0 ,40.0 ,70.0 };

   size_t numMomentumBins = mombins.size();
   
   std::vector<std::vector<TH1F*>> invMassHist(5, std::vector<TH1F*>(numMomentumBins - 1, nullptr));
   
   for (int p = 0; p < 5; ++p) {
     for (size_t i = 0; i < mombins.size(); ++i) {
       double min_p = mombins.at(i);
       TString histName = Form("l_invMass_%d_for_mom_%.2f", p, min_p);
       invMassHist[p][i] = new TH1F(histName, Form("Invariant Mass for p_index = %d for mom %.2f ", p, min_p), 100,1.05, 1.5);
     }
   }

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {

     Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;

      double n_rich = sqrt((m_pi*m_pi/(pi_thr*pi_thr)) + 1);
      
      if(pp_mom < p_thr || pm_mom < pi_thr){ continue ; }


      if( pt1 > 0.11 || pt2 > 0.11){ continue ;}

      if(alpha < 0 ){ continue ; }
      
      // if(pp_mom < 10. || pm_mom < 10.){ continue ; }
      //if( pt1 < 0.1 | pt2 < 0.1 ){ continue ; }

      float theta_pp = pp_ch;
      float theta_pm = pm_ch;

      if(theta_pp == 0 || theta_pp == -1){ continue ; }
      if(theta_pm == 0 || theta_pm == -1){ continue ; }

      double l_mass = lv_lambda->M();

      //      if( abs(k_mass - 0.497) > 0.020 ) { continue ; }
      //if( lv_lambda->Pt() < 0.040 ) { continue ; }

      double lh_values_p[4] = {pp_lh[0], pp_lh[1], pp_lh[2], pp_lh[5]};
      double lh_values_m[4] = {pm_lh[0], pm_lh[1], pm_lh[2], pm_lh[5]};

      float p_maxvalue = -999.0;
      int p_index = -10;
      float m_maxvalue = -999.0;
      int m_index = -10;

     
      for(int m = 0; m < 4; m++) {
        if(lh_values_p[m] > p_maxvalue) {
          p_maxvalue = lh_values_p[m];
          p_index = m;
        }
        if(lh_values_m[m] > m_maxvalue) {
          m_maxvalue = lh_values_m[m];
          m_index = m;
        }
      }
   
      size_t pBinIndex = 0;
      while (pBinIndex < mombins.size() - 1 && !(pp_mom >= mombins[pBinIndex] && pp_mom < mombins[pBinIndex + 1])) {
        ++pBinIndex;
      }

      if( m_index == 0  ){
	invMassHist[p_index][pBinIndex]->Fill(l_mass);
	invMassHist[4][pBinIndex]->Fill(l_mass);
	if(pp_mom > 10.0 && pp_mom < 50.0){
	h_invmass_l->Fill(l_mass);
      }
      }

      h_arment->Fill(alpha, pt1);
      h2->Fill(m_index,p_index);
      
   }

   TFile *outputFile = new TFile("l_input.root", "RECREATE");

   h_arment->Write();
   h_invmass_l->Write();
   h2->Write();
   
   for (int p = 0; p < 5; ++p) {
     for(int i = 0; i < 13; i++){	
       invMassHist[p][i]->Write();
     }
   }
    
   outputFile->Close();

}

