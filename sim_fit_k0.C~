#include "sim_fit_k0.h"
#include "RooRealVar.h"
#include "RooGaussian.h"
#include "RooPolynomial.h"
#include "RooAddPdf.h"
#include "RooDataHist.h"
#include "RooCategory.h"
#include "RooSimultaneous.h"
#include "RooPlot.h"
#include "TCanvas.h"
#include "TH1F.h"
#include "TFile.h"
#include "RooFit.h"
#include "RooMinimizer.h"

void fit_k0(TFile* file, std::vector<std::vector<TH1F*>>& invMassHist, const std::vector<float>& mombins) {

  if (!file || file->IsZombie()) {
    std::cerr << "Invalid or corrupted ROOT file!" << std::endl;
    return;
  }

  // Clear any existing histograms in the vector
  for (auto& histVec : invMassHist) {
    std::fill(histVec.begin(), histVec.end(), nullptr);
  }

  for (int p = 0; p < 5; ++p) {
    for (size_t i = 0; i < mombins.size(); ++i) {
      double min_p = mombins.at(i);
      TString histName = Form("k0_invMass_%d_for_mom_%.2f", p, min_p);
      TH1F* hist = dynamic_cast<TH1F*>(file->Get(histName));
      if (hist) {
	invMassHist[p][i] = hist;
      } else {
	std::cerr << "Histogram " << histName << " not found in file." << std::endl;
      }
    }
  }


  std::ofstream outputtext("signal_background_results_simfit.txt");
  
  outputtext << "Category\t Momentum Bin \t N_as \t N_pi_s \t N_k_s \t N_p_s \t N_u_s \n";
  
  TCanvas* c1 = new TCanvas("c1", "Fit Results", 800, 600);
  c1->Print("k0_fitresults.pdf[");
  
  for (size_t i = 0; i < mombins.size(); ++i) {

    //Signal
    RooRealVar x("x","M",0.44,0.56,"GeV");
    x.setBins(120);

    /*    RooRealVar mean("mean","mean",0.5,0.47,0.52,"GeV") ;
    RooRealVar sigma1("sigma1","sigma1",0.01,0.,0.1,"GeV");
    RooRealVar sigma2("sigma2","sigma2",0.005,0.,0.1,"GeV");

    RooGaussian gauss1("gauss1","gauss1",x,mean,sigma1) ;
    RooGaussian gauss2("gauss2","gauss2",x,mean,sigma2) ;
    */
    RooRealVar mass("mass", "Invariant Mass of Pion Pairs", 0.45, 0.55);  // in GeV

    RooRealVar mean1("mean1", "Kaon Mass Peak 1", 0.49, 0.4, 0.5);  // First Gaussian (main peak)
    RooRealVar sigma1("sigma1", "Width 1", 0.003, 0.001, 0.01);
    RooGaussian gauss1("gauss1", "First Gaussian", mass, mean1, sigma1);

    RooRealVar mean2("mean2", "Kaon Mass Peak 2", 0.49, 0.4, 0.5);  // Second Gaussian (wider tail)
    RooRealVar sigma2("sigma2", "Width 2", .01, 0.01, 0.05);
    RooGaussian gauss2("gauss2", "Second Gaussian", mass, mean2, sigma2);

    RooRealVar k0a("a0", "Coefficient of 1st term", 0.0);
    RooRealVar k1a("a1", "Coefficient of 2nd term", 0.0, -0.5, 0.5);
    RooRealVar k2a("a2", "Coefficient of 3rd term", 0.0, -0.5, 0.5);
    RooRealVar k3a("a3", "Coefficient of 4rd term", 0.0);
    RooChebychev bgna("background", "Background Polynomial", mass, RooArgSet(k0a, k1a, k2a, k3a));
    RooChebychev bgnp("background", "Background Polynomial", mass, RooArgSet(k0a, k1a, k2a, k3a));

    /*
    //Background
    RooRealVar k0a("k0a","k0a",	-0.2,	-1.,	1.) ;
    RooRealVar k1a("k1a","k1a",	-0.3,	-1.,	1.) ;
    RooRealVar k2a("k2a","k2a",	0.,		-1.,	1.) ;
    RooChebychev bgna("bgna","bgna",x,RooArgSet(k0a,k1a,k2a));//,k3a,k4a)) ;

    RooRealVar k0p("k0p","k0p",	-0.6,	-1.,	1.) ;
    RooRealVar k1p("k1p","k1p",	-0.4,	-1.,	1.) ;
    RooRealVar k2p("k2p","k2p",	0.08,	-1.,	1.) ;
    RooChebychev bgnp("bgnp","bgnp",x,RooArgSet(k0p,k1p,k2p));//,k3p,k4p)) ;
    */
   
    // Number of signal and background events for each category
    int ent = invMassHist[4][i]->GetEntries();
    RooRealVar N_a_b("N_a_b", "N_a_b", 0.05*ent, 0., 1.05*ent);

    ent = invMassHist[0][i]->GetEntries();
    RooRealVar N_pi_s("N_pi_s","N_pi_s",0.9*ent, 0.,1.05*ent) ;
    RooRealVar N_pi_b("N_pi_b","N_pi_b",0.1*ent, 0.,1.05*ent) ;

    ent = invMassHist[1][i]->GetEntries();
    RooRealVar N_k_s("N_k_s","N_k_s",0.3*ent,0.,1.05*ent) ;
    RooRealVar N_k_b("N_k_b","N_k_b",0.7*ent,0.,1.05*ent) ;

    ent = invMassHist[2][i]->GetEntries();
    RooRealVar N_p_s("N_p_s","N_p_s",0.2*ent,0.,1.05*ent) ;
    RooRealVar N_p_b("N_p_b","N_p_b",0.8*ent,0.,1.05*ent) ;

    ent = invMassHist[3][i]->GetEntries();
    RooRealVar N_u_s("N_u_s","N_u_s",0.8*ent,0.,1.05*ent) ;
    RooRealVar N_u_b("N_u_b","N_u_b",0.05*ent,0.,1.05*ent) ;

    //RooRealVar frac_s("frac_s","frac_s",0.65,0.5,0.7) ;
    //RooAddPdf sig("sig","sig",RooArgList(gauss1,gauss2),frac_s) ;

    RooRealVar frac_s("frac", "Fraction of First Gaussian", 0.5, 0.0, 1.0);
    RooAddPdf sig("signal", "Double Gaussian Signal", RooArgList(gauss1, gauss2), RooArgList(frac_s));
    
    RooFormulaVar N_a_s("N_a_s","N_pi_s + N_k_s + N_p_s + N_u_s",RooArgSet(N_pi_s,N_k_s,N_p_s,N_u_s));

    RooAddPdf model_all("model_all","model_all",RooArgList(sig,bgna),RooArgList(N_a_s,N_a_b)) ;
    RooAddPdf model_pi("model_pi","model_pi",RooArgList(sig,bgna),RooArgList(N_pi_s,N_pi_b)) ; // checked with bgnpi
    RooAddPdf model_k("model_k","model_k",RooArgList(sig,bgna),RooArgList(N_k_s,N_k_b)) ; // checked with bgnk
    RooAddPdf model_p("model_p","model_p",RooArgList(sig,bgnp),RooArgList(N_p_s,N_p_b)) ;
    RooAddPdf model_unk("model_unk","model_unk",RooArgList(sig,bgna),RooArgList(N_u_s,N_u_b)) ;

    RooDataHist data_all("data_all","data_all",x,Import(*invMassHist[4][i])); //all events in p bins
    RooDataHist data_pi("data_pi","data_pi",x,Import(*invMassHist[0][i])); //pion events
    RooDataHist data_k("data_k","data_k",x,Import(*invMassHist[1][i])); //kaon 
    RooDataHist data_p("data_p","data_p",x,Import(*invMassHist[2][i])); //proton
    RooDataHist data_unk("data_unk","data_unk",x,Import(*invMassHist[3][i])); //background


    RooCategory sample("sample","sample") ;
    sample.defineType("all") ;
    sample.defineType("pi") ;
    sample.defineType("k") ;
    sample.defineType("p") ;
    sample.defineType("unk") ;

    RooDataHist combData("combData","combined data",x,Index(sample),Import("all",data_all),Import("pi",data_pi),Import("k",data_k),Import("p",data_p),Import("unk",data_unk));

    RooSimultaneous simPdf("simPdf","simultaneous pdf",sample) ;
    simPdf.addPdf(model_all,"all") ;
    simPdf.addPdf(model_pi,"pi") ;
    simPdf.addPdf(model_k,"k") ;
    simPdf.addPdf(model_p,"p") ;
    simPdf.addPdf(model_unk,"unk") ;

    // Add a constraint to ensure particle counts sum up to the total count N_a_s
    RooFormulaVar restriction("restriction", "100000 * (TMath::Abs(1 - (N_pi_s + N_k_s + N_p_s + N_u_s) / N_a_s) > 1e-4)",
			      RooArgSet(N_a_s, N_pi_s, N_k_s, N_p_s, N_u_s));

    // Create a simple negative log-likelihood for a PDF (assuming simPdf and combData are defined)
    RooAbsReal* nll = simPdf.createNLL(combData, Extended(true));
 
    // Add the restriction to the NLL to penalize mismatches in counts
    RooAddition nll_r("nll_r", "nll_r", RooArgSet(*nll, restriction));

    // Set up the minimizer and run the fit
    RooMinimizer minimizer(*nll); // Create a RooMinimizer instance
    minimizer.setPrintLevel(0); // Set print level for minimizer
    minimizer.migrad(); // Run the minimization

    // Save the fit result
    RooFitResult* result = minimizer.save(); // Save the fit result
    
    //  outputtext <<" "  << "\t\t" << mombins.at(i) << "\t\t" <<N_a_s.getVal() <<"\t"<<N_pi_s.getVal()<<"\t"<<N_k_s.getVal()<<"\t"<<N_p_s.getVal()<<"\t"<<N_u_s.getVal()<<"\n";

    std::ostringstream nn;
    nn << "Fit for momentum bin " << i;

    // Define the line width for plot
    int lw = 2;

    RooPlot* frame1 = x.frame(Title(nn.str().c_str())) ;
    combData.plotOn(frame1,Cut("sample==sample::all")) ;
    simPdf.plotOn(frame1,Slice(sample,"all"),ProjWData(sample,combData),LineWidth(lw)) ;
    simPdf.plotOn(frame1,Slice(sample,"all"),Components("gauss1"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kRed)) ;
    simPdf.plotOn(frame1,Slice(sample,"all"),Components("gauss2"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kGreen)) ;
    simPdf.plotOn(frame1,Slice(sample,"all"),Components("bgna"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kOrange)) ;
    combData.plotOn(frame1,Cut("sample==sample::all")) ;
    
    // Draw and save the frame to canvas
    frame1->Draw();
    TLatex latex1;
    latex1.SetNDC();
    latex1.SetTextSize(0.03);
    latex1.DrawLatex(0.6, 0.85, Form("Chi2/ndf: %.2f", frame1->chiSquare()));
    c1->Print("k0_fitresults.pdf");
    delete frame1;
    
    RooPlot* frame2 = x.frame(Title("pi")) ;
    combData.plotOn(frame2,Cut("sample==sample::pi")) ;
    simPdf.plotOn(frame2,Slice(sample,"pi"),ProjWData(sample,combData),LineWidth(lw)) ;
    simPdf.plotOn(frame2,Slice(sample,"pi"),Components("gauss1"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kRed)) ;
    simPdf.plotOn(frame2,Slice(sample,"pi"),Components("gauss2"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kGreen)) ;
    simPdf.plotOn(frame2,Slice(sample,"pi"),Components("bgna"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kOrange)) ;
    combData.plotOn(frame2,Cut("sample==sample::pi")) ;

    frame2->Draw();
    TLatex latex2;
    latex2.SetNDC();
    latex2.SetTextSize(0.03);
    latex2.DrawLatex(0.6, 0.85, Form("Chi2/ndf: %.2f", frame2->chiSquare()));
    c1->Print("k0_fitresults.pdf");
    delete frame2;
    
    RooPlot* frame3 =x.frame(Title("k")) ;
    combData.plotOn(frame3,Cut("sample==sample::k")) ;
    simPdf.plotOn(frame3,Slice(sample,"k"),ProjWData(sample,combData),LineWidth(lw)) ;
    simPdf.plotOn(frame3,Slice(sample,"k"),Components("gauss1"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kRed)) ;
    simPdf.plotOn(frame3,Slice(sample,"k"),Components("gauss2"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kGreen)) ;
    simPdf.plotOn(frame3,Slice(sample,"k"),Components("bgna"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kOrange)) ;
    combData.plotOn(frame3,Cut("sample==sample::k")) ;

    frame3->Draw();
    TLatex latex3;
    latex3.SetNDC();
    latex3.SetTextSize(0.03);
    latex3.DrawLatex(0.6, 0.85, Form("Chi2/ndf: %.2f", frame3->chiSquare()));
    c1->Print("k0_fitresults.pdf");
    delete frame3;
    
    RooPlot* frame4 = x.frame(Title("p")) ;
    combData.plotOn(frame4,Cut("sample==sample::p")) ;
    simPdf.plotOn(frame4,Slice(sample,"p"),ProjWData(sample,combData),LineWidth(lw)) ;
    simPdf.plotOn(frame4,Slice(sample,"p"),Components("gauss1"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kRed)) ;
    simPdf.plotOn(frame4,Slice(sample,"p"),Components("gauss2"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kGreen)) ;
    simPdf.plotOn(frame4,Slice(sample,"p"),Components("bgnp"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kOrange)) ;
    combData.plotOn(frame4,Cut("sample==sample::p")) ;

    frame4->Draw();
    TLatex latex4;
    latex4.SetNDC();
    latex4.SetTextSize(0.03);
    latex4.DrawLatex(0.6, 0.85, Form("Chi2/ndf: %.2f", frame4->chiSquare()));
    c1->Print("k0_fitresults.pdf");
    delete frame4;
    
    RooPlot* frame5 = x.frame(Title("noID")) ;
    combData.plotOn(frame5,Cut("sample==sample::unk")) ;
    simPdf.plotOn(frame5,Slice(sample,"unk"),ProjWData(sample,combData),LineWidth(lw)) ;
    simPdf.plotOn(frame5,Slice(sample,"unk"),Components("gauss1"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kRed)) ;
    simPdf.plotOn(frame5,Slice(sample,"unk"),Components("gauss2"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kGreen)) ;
    simPdf.plotOn(frame5,Slice(sample,"unk"),Components("bgna"),ProjWData(sample,combData),LineStyle(kDashed),LineWidth(lw),LineColor(kOrange)) ;
    combData.plotOn(frame5,Cut("sample==sample::unk")) ;

    frame5->Draw();
    TLatex latex5;
    latex5.SetNDC();
    latex5.SetTextSize(0.03);
    latex5.DrawLatex(0.6, 0.85, Form("Chi2/ndf: %.2f", frame5->chiSquare()));
    c1->Print("k0_fitresults.pdf");
    delete frame5;
    
  }
     c1->Print("k0_fitresults.pdf]");
     delete c1;
}



int sim_fit_k0() {
    TFile* file = TFile::Open("k0_input.root", "READ");
    std::vector<float> mombins = {10.0, 11.0, 12.0, 13.0, 15.0, 17.0, 19.0, 22.0, 25.0, 27.0, 30.0, 35.0, 40.0};
    size_t numMomentumBins = mombins.size();
    std::vector<std::vector<TH1F*>> invMassHist(5, std::vector<TH1F*>(numMomentumBins - 1, nullptr));
    if (file) {
        fit_k0(file, invMassHist, mombins);
        //file->Close();
    }
    // Use invMassHist as needed
    return 0;
}

    /*
    // Convert histograms to RooDataHist objects
    RooDataHist data_pi_as_pi("data_pi_as_pi", "Pi+ as Pi+", mass, RooFit::Import(*histograms[0]));
    RooDataHist data_pi_as_k("data_pi_as_k", "Pi+ as K+", mass, RooFit::Import(*histograms[1]));
    RooDataHist data_pi_as_proton("data_pi_as_proton", "Pi+ as Proton", mass, RooFit::Import(*histograms[2]));
    RooDataHist data_pi_not_identified("data_pi_not_identified", "Pi+ not identified", mass, RooFit::Import(*histograms[3]));
    RooDataHist data_all_events("data_all_events", "All Events", mass, RooFit::Import(*histograms[4]));

    // Combine the datasets using the category
    RooDataHist combinedData("combinedData", "Combined Data", RooArgSet(mass), RooFit::Index(category),
        RooFit::Import("Pi_as_Pi", data_pi_as_pi),
        RooFit::Import("Pi_as_K", data_pi_as_k),
        RooFit::Import("Pi_as_Proton", data_pi_as_proton),
        RooFit::Import("Pi_not_identified", data_pi_not_identified),
        RooFit::Import("All_Events", data_all_events));

    // Define a simultaneous model using the category
    RooSimultaneous simPdf("simPdf", "Simultaneous Fit", category);
    simPdf.addPdf(model, "Pi_as_Pi");
    simPdf.addPdf(model, "Pi_as_K");
    simPdf.addPdf(model, "Pi_as_Proton");
    simPdf.addPdf(model, "Pi_not_identified");
    simPdf.addPdf(model, "All_Events");

    // Fit the model to the combined dataset
    //simPdf.fitTo(combinedData);
    simPdf.fitTo(combinedData, RooFit::Minimizer("Minuit2"));
    
    // Fit the model to the combined dataset
    RooFitResult* fitResult = simPdf.fitTo(combinedData, RooFit::Save());

    // Plot the results for each category
    TCanvas* c1 = new TCanvas("c1", "Simultaneous Fit Results", 800, 600);
    c1->Divide(1,2);
    RooPlot* frame;
    TLatex latex;
    latex.SetNDC();
    latex.SetTextSize(0.03);
    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::Pi_as_Pi"));
    simPdf.plotOn(frame, RooFit::Slice(category, "Pi_as_Pi"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("Pi+ as Pi+");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));  
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));

    c1->cd(2);
    RooHist* residualspi = frame->residHist();
    RooPlot* residualFramepi = mass.frame();
    residualFramepi->addPlotable(residualspi, "P");
    residualFramepi->Draw();
    c1->SaveAs("fit_result_pi_as_pi.png");

    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::Pi_as_K"));
    simPdf.plotOn(frame, RooFit::Slice(category, "Pi_as_K"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("Pi+ as K+");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));  // Chi-square
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));
    c1->cd(2);
        RooHist* residualsk = frame->residHist();
        RooPlot* residualFramek = mass.frame();
        residualFramek->addPlotable(residualsk, "P");
        residualFramek->Draw();
    c1->SaveAs("fit_result_pi_as_k.png");

    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::Pi_as_Proton"));
    simPdf.plotOn(frame, RooFit::Slice(category, "Pi_as_Proton"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("Pi+ as Proton");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));  // Chi-square
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));
 c1->cd(2);
        RooHist* residualspr = frame->residHist();
        RooPlot* residualFramepr = mass.frame();
        residualFramepr->addPlotable(residualspr, "P");
        residualFramepr->Draw();
    c1->SaveAs("fit_result_pi_as_proton.png");

    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::Pi_not_identified"));
    simPdf.plotOn(frame, RooFit::Slice(category, "Pi_not_identified"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("Pi+ not identified");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));
 c1->cd(2);
        RooHist* residualsno = frame->residHist();
        RooPlot* residualFrameno = mass.frame();
        residualFrameno->addPlotable(residualsno, "P");
        residualFrameno->Draw();
    c1->SaveAs("fit_result_pi_noID.png");

    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::All_Events"));
    simPdf.plotOn(frame, RooFit::Slice(category, "All_Events"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("All Events");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));  // Chi-square
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));
 c1->cd(2);
        RooHist* residualsall = frame->residHist();
        RooPlot* residualFrameall = mass.frame();
        residualFrameall->addPlotable(residualsall, "P");
        residualFrameall->Draw();
    c1->SaveAs("fit_result_all_events.png");

    delete c1;  // Clean up
    delete f;  // Clean up
}
    */


