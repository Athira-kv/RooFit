#include "RooRealVar.h"
#include "RooGaussian.h"
#include "RooPolynomial.h"
#include "RooAddPdf.h"
#include "RooDataHist.h"
#include "RooCategory.h"
#include "RooSimultaneous.h"
#include "RooPlot.h"
#include "TCanvas.h"
#include "TH1F.h"
#include "TFile.h"
#include "RooFit.h"

void fit_k0(TFile* file) {

  
  std::vector<TH1F*> histograms;
  for (int mom = 10; mom <= 30; mom += 1) {  
    std::string histName = "k0_invMass_0_for_mom_" + std::to_string(mom) + ".00";
    TH1F* hist = dynamic_cast<TH1F*>(file.Get(histName.c_str()));
    if (hist) {
      histograms.push_back(hist);
    } else {
      std::cerr << "Histogram " << histName << " not found in file." << std::endl;
    }
  }
  
  RooRealVar mass("mass", "Invariant Mass of Pion Pairs", 0.45, 0.55);  // in GeV

  RooRealVar mean1("mean1", "Kaon Mass Peak 1", 0.49, 0.4, 0.5);  // First Gaussian
  RooRealVar sigma1("sigma1", "Width 1", 0.003, 0.001, 0.01);
  RooGaussian gauss1("gauss1", "First Gaussian", mass, mean1, sigma1);

  RooRealVar mean2("mean2", "Kaon Mass Peak 2", 0.49, 0.4, 0.5);  // Second Gaussian 
  RooRealVar sigma2("sigma2", "Width 2", .01, 0.01, 0.05);
  RooGaussian gauss2("gauss2", "Second Gaussian", mass, mean2, sigma2);

  RooRealVar frac("frac", "Fraction of First Gaussian", 0.5, 0.0, 1.0);
  
  RooAddPdf k_signal("k_signal", "Double Gaussian Signal", RooArgList(gauss1, gauss2), RooArgList(frac));
  
  RooRealVar a0("a0", "Coefficient of 1st term", 0.0);
  RooRealVar a1("a1", "Coefficient of 2nd term", 0.0, -0.5, 0.5);
  RooRealVar a2("a2", "Coefficient of 3rd term", 0.0, -0.5, 0.5);
  RooRealVar a3("a3", "Coefficient of 4rd term", 0.0);
  RooChebychev k_background("k_background", "Background Polynomial", mass, RooArgSet(a0, a1, a2, a3));

  // Number of signal and background events for each category
  RooRealVar N_k_signal("N_k_signal", "Signal Events", 1000000, 0, 1000000);
  RooRealVar N_k_background("N_k_background", "Background Events", 1000, 0, 10000);

  // Combine signal and background for individual fitting
  RooAddPdf k_model("model", "Signal + Background", RooArgList(k_signal, k_background), RooArgList(N_k_signal, N_k_background));


    RooCategory category1("category", "Category");
    category1.defineType("Pi_as_Pi");
    category1.defineType("Pi_as_K");
    category1.defineType("Pi_as_Proton");
    category1.defineType("Pi_not_identified");
    category1.defineType("All_Events");



    


    
    TFile* f = new TFile("k0_input.root");  // Make sure this is the correct path

    std::vector<std::vector<TH1F*>> invMassHist(5, std::vector<TH1F*>(numMomentumBins - 1, nullptr));        


    // Convert histograms to RooDataHist objects
    RooDataHist data_pi_as_pi("data_pi_as_pi", "Pi+ as Pi+", mass, RooFit::Import(*histograms[0]));
    RooDataHist data_pi_as_k("data_pi_as_k", "Pi+ as K+", mass, RooFit::Import(*histograms[1]));
    RooDataHist data_pi_as_proton("data_pi_as_proton", "Pi+ as Proton", mass, RooFit::Import(*histograms[2]));
    RooDataHist data_pi_not_identified("data_pi_not_identified", "Pi+ not identified", mass, RooFit::Import(*histograms[3]));
    RooDataHist data_all_events("data_all_events", "All Events", mass, RooFit::Import(*histograms[4]));

    // Combine the datasets using the category
    RooDataHist combinedData("combinedData", "Combined Data", RooArgSet(mass), RooFit::Index(category),
        RooFit::Import("Pi_as_Pi", data_pi_as_pi),
        RooFit::Import("Pi_as_K", data_pi_as_k),
        RooFit::Import("Pi_as_Proton", data_pi_as_proton),
        RooFit::Import("Pi_not_identified", data_pi_not_identified),
        RooFit::Import("All_Events", data_all_events));

    // Define a simultaneous model using the category
    RooSimultaneous simPdf("simPdf", "Simultaneous Fit", category);
    simPdf.addPdf(model, "Pi_as_Pi");
    simPdf.addPdf(model, "Pi_as_K");
    simPdf.addPdf(model, "Pi_as_Proton");
    simPdf.addPdf(model, "Pi_not_identified");
    simPdf.addPdf(model, "All_Events");

    // Fit the model to the combined dataset
    //simPdf.fitTo(combinedData);
    simPdf.fitTo(combinedData, RooFit::Minimizer("Minuit2"));
    
    // Fit the model to the combined dataset
    RooFitResult* fitResult = simPdf.fitTo(combinedData, RooFit::Save());

    // Plot the results for each category
    TCanvas* c1 = new TCanvas("c1", "Simultaneous Fit Results", 800, 600);
    c1->Divide(1,2);
    RooPlot* frame;
    TLatex latex;
    latex.SetNDC();
    latex.SetTextSize(0.03);
    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::Pi_as_Pi"));
    simPdf.plotOn(frame, RooFit::Slice(category, "Pi_as_Pi"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("Pi+ as Pi+");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));  
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));

    c1->cd(2);
    RooHist* residualspi = frame->residHist();
    RooPlot* residualFramepi = mass.frame();
    residualFramepi->addPlotable(residualspi, "P");
    residualFramepi->Draw();
    c1->SaveAs("fit_result_pi_as_pi.png");

    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::Pi_as_K"));
    simPdf.plotOn(frame, RooFit::Slice(category, "Pi_as_K"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("Pi+ as K+");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));  // Chi-square
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));
    c1->cd(2);
        RooHist* residualsk = frame->residHist();
        RooPlot* residualFramek = mass.frame();
        residualFramek->addPlotable(residualsk, "P");
        residualFramek->Draw();
    c1->SaveAs("fit_result_pi_as_k.png");

    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::Pi_as_Proton"));
    simPdf.plotOn(frame, RooFit::Slice(category, "Pi_as_Proton"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("Pi+ as Proton");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));  // Chi-square
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));
 c1->cd(2);
        RooHist* residualspr = frame->residHist();
        RooPlot* residualFramepr = mass.frame();
        residualFramepr->addPlotable(residualspr, "P");
        residualFramepr->Draw();
    c1->SaveAs("fit_result_pi_as_proton.png");

    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::Pi_not_identified"));
    simPdf.plotOn(frame, RooFit::Slice(category, "Pi_not_identified"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("Pi+ not identified");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));
 c1->cd(2);
        RooHist* residualsno = frame->residHist();
        RooPlot* residualFrameno = mass.frame();
        residualFrameno->addPlotable(residualsno, "P");
        residualFrameno->Draw();
    c1->SaveAs("fit_result_pi_noID.png");

    c1->cd(1);
    frame = mass.frame();
    combinedData.plotOn(frame, RooFit::Cut("category==category::All_Events"));
    simPdf.plotOn(frame, RooFit::Slice(category, "All_Events"), RooFit::ProjWData(category, combinedData));
    frame->SetTitle("All Events");
    frame->Draw();
    latex.DrawLatex(0.6, 0.8, Form("Chi2/ndf: %.2f", frame->chiSquare()));  // Chi-square
    latex.DrawLatex(0.6, 0.75, Form("Mean: %.4f : ", (mean1.getVal() + mean2.getVal())/2));
    latex.DrawLatex(0.6, 0.70, Form("Sigma: %.4f : ", (sigma1.getVal() + sigma2.getVal())/2));
    latex.DrawLatex(0.6, 0.65, Form("Signal yield :%.2f +/- %.2f ", N_signal.getVal(), N_signal.getError()));
    latex.DrawLatex(0.6, 0.60, Form("background yield : %.2f +/- %.2f ", N_background.getVal(), N_background.getError()));
 c1->cd(2);
        RooHist* residualsall = frame->residHist();
        RooPlot* residualFrameall = mass.frame();
        residualFrameall->addPlotable(residualsall, "P");
        residualFrameall->Draw();
    c1->SaveAs("fit_result_all_events.png");

    delete c1;  // Clean up
    delete f;  // Clean up
}
