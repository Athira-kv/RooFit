#define roofit_mom_cxx
#include "roofit_mom.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <fstream> // Include fstream for file I/O

double m_pi = 0.139570;

void roofit_mom::Loop()
{

  if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   TH2D* h_arment = new TH2D("arment","arment", 2000, -1, 1, 400, 0, 0.4);
   TH1D* h_invmass_k = new TH1D("kmass","kmass",200,0.4,0.6);

   //momentum bins: Momentum p(GeV/c) = (10,11,12,13,15,17,19,22,25,27,30,35,40,50)

   std::vector<float> mombins = {10.0 ,11.0 ,12.0 ,13.0 ,15.0 ,17.0 ,19.0 ,22.0 ,25.0 ,27.0 ,30.0 ,35.0 ,40.0 ,50.0 };
   size_t numMomentumBins = mombins.size();
   
   std::vector<std::vector<TH1F*>> invMassHist(5, std::vector<TH1F*>(numMomentumBins - 1, nullptr));
   
   //TH1F* invMassHist[5][13];
   for (int p = 0; p < 5; ++p) {
     for (size_t i = 0; i < mombins.size(); ++i) {
       double min_p = mombins.at(i);
       TString histName = Form("invMass_%d_for_mom_%.2f", p, min_p);
       invMassHist[p][i] = new TH1F(histName, Form("Invariant Mass for p_index = %d for mom %.2f ", p, min_p), 200, 0.4, 0.6);
     }
   }

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {

     Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;

      double n_rich = sqrt((m_pi*m_pi/(pi_thr*pi_thr)) + 1);
      if(pp_mom < pi_thr || pm_mom < pi_thr){ continue ; }


      if( pt1 < 0.10 || pt2 < 0.10){ continue ;}

      if(pp_mom < 10. || pm_mom < 10.){ continue ; }
      //if( pt1 < 0.1 | pt2 < 0.1 ){ continue ; }

      float theta_pp = pp_ch;
      float theta_pm = pm_ch;

      if(theta_pp == 0 || theta_pp == -1){ continue ; }
      if(theta_pm == 0 || theta_pm == -1){ continue ; }

      double k_mass = lv_k0->M();

      //      if( abs(k_mass - 0.497) > 0.020 ) { continue ; }
      if( lv_k0->Pt() < 0.040 ) { continue ; }

      double lh_values_p[4] = {pp_lh[0], pp_lh[1], pp_lh[2], pp_lh[5]};
      double lh_values_m[4] = {pm_lh[0], pm_lh[1], pm_lh[2], pm_lh[5]};

      float p_maxvalue = -999.0;
      int p_index = -10;
      float m_maxvalue = -999.0;
      int m_index = -10;

     
      for(int m = 0; m < 4; m++) {
        if(lh_values_p[m] > p_maxvalue) {
          p_maxvalue = lh_values_p[m];
          p_index = m;
        }
        if(lh_values_m[m] > m_maxvalue) {
          m_maxvalue = lh_values_m[m];
          m_index = m;
        }
      }
   
      size_t pBinIndex = 0;
      while (pBinIndex < mombins.size() - 1 && !(pp_mom >= mombins[pBinIndex] && pp_mom < mombins[pBinIndex + 1])) {
        ++pBinIndex;
      }

      if( m_index == 0  ){
	invMassHist[p_index][pBinIndex]->Fill(k_mass);
      }


      invMassHist[4][pBinIndex]->Fill(k_mass);
      
      h_invmass_k->Fill(k_mass);
      h_arment->Fill(alpha, pt1);
   }

   TFile *outputFile = new TFile("w8_momfit_input.root", "RECREATE");

   h_arment->Write();
   h_invmass_k->Write();

   for (int p = 0; p < 5; ++p) {
     for(int i = 0; i < 13; i++){
	
       invMassHist[p][i]->Write();
     }
   }
    
   outputFile->Close();

   std::ofstream outputtext("signal_background_results.txt");

   outputtext << "Category\tMomentum Bin\tSignal Yield\tSignal Error\tBackground Yield\tBackground Error\n";
 
   
   TCanvas* c1 = new TCanvas("c1", "Fit Results", 800, 600);
   c1->Print("momfit_results.pdf[");
   
   for (int p_index = 0; p_index < 5; ++p_index) { 
     for (size_t pBinIndex = 0; pBinIndex < mombins.size() - 1; ++pBinIndex) {
       
       TH1F* hist = invMassHist[p_index][pBinIndex];
        

       RooRealVar mass("mass", "Invariant Mass of Pion Pairs", 0.45, 0.55);  // in GeV

       RooRealVar mean1("mean1", "Kaon Mass Peak 1", 0.49, 0.4, 0.5);  // First Gaussian (main peak)
       RooRealVar sigma1("sigma1", "Width 1", 0.003, 0.001, 0.01);
       RooGaussian gauss1("gauss1", "First Gaussian", mass, mean1, sigma1);

       RooRealVar mean2("mean2", "Kaon Mass Peak 2", 0.49, 0.4, 0.5);  // Second Gaussian (wider tail)
       RooRealVar sigma2("sigma2", "Width 2", .01, 0.01, 0.05);
       RooGaussian gauss2("gauss2", "Second Gaussian", mass, mean2, sigma2);

       RooRealVar frac("frac", "Fraction of First Gaussian", 0.5, 0.0, 1.0);

       RooAddPdf signal("signal", "Double Gaussian Signal", RooArgList(gauss1, gauss2), RooArgList(frac));

       RooRealVar a0("a0", "Coefficient of 1st term", 0.0);
       RooRealVar a1("a1", "Coefficient of 2nd term", 0.0, -0.5, 0.5);
       RooRealVar a2("a2", "Coefficient of 3rd term", 0.0, -0.5, 0.5);
       RooRealVar a3("a3", "Coefficient of 4rd term", 0.0);
       RooChebychev background("background", "Background Polynomial", mass, RooArgSet(a0, a1, a2, a3));


       // Number of signal and background events for each category
       RooRealVar N_signal("N_signal", "Signal Events", 1000000, 0, 1000000);
       RooRealVar N_background("N_background", "Background Events", 1000, 0, 10000);

       // Combine signal and background for individual fitting
       RooAddPdf model("model", "Signal + Background", RooArgList(signal, background), RooArgList(N_signal, N_background));

       RooDataHist data("data", "Data", mass, RooFit::Import(*hist));

       
        // Fit the model to the data
        RooFitResult* fitResult = model.fitTo(data, RooFit::Save());
	// Write the results to the text file
        outputtext << p_index << "\t\t" << mombins.at(pBinIndex) << "\t\t" 
                   << N_signal.getVal() << "\t\t" << N_signal.getError() << "\t\t" 
                   << N_background.getVal() << "\t\t" << N_background.getError() << "\n";

	
        // Plotting can also be done here if desired
        RooPlot* frame = mass.frame();
        data.plotOn(frame);
        model.plotOn(frame);
        frame->Draw();

	TLatex latex;
        latex.SetNDC();
        latex.SetTextSize(0.03);
	latex.DrawLatex(0.6, 0.85, Form("Chi2/ndf: %.2f", frame->chiSquare()));
        latex.DrawLatex(0.6, 0.8, Form("Category: %d, Momentum Bin: %.2f", p_index, mombins.at(pBinIndex)));
        latex.DrawLatex(0.6, 0.75, Form("N_signal: %.2f +/- %.2f", N_signal.getVal(), N_signal.getError()));
        latex.DrawLatex(0.6, 0.70, Form("N_background: %.2f +/- %.2f", N_background.getVal(), N_background.getError()));

        c1->Print("momfit_results.pdf");

	delete frame;
	
     }
   }
   
   c1->Print("momfit_results.pdf]"); 
   delete c1;
   outputtext.close();

}

